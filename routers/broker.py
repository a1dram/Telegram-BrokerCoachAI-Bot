from random import choice, randint

from sqlalchemy import select

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram import Router
from aiogram.fsm.context import FSMContext

from data import database
from data.user_form import User

from utils.forms import Form
from utils.keyboards import end_dialog_kb, start_dialog_kb, start_registration_kb
from utils.ai_plugins import get_ai_answer, get_the_dialog_analysis
from utils.help_ai_info import traits, person
from utils.help_functions import get_structured_dialog

from config import bot

broker_router = Router(name=__name__)


@broker_router.message(Command("start"))
@broker_router.message(Form.new_dialog)
async def answer(message: Message, state: FSMContext):
    s_user_id = str(message.from_user.id)
    username = message.from_user.username

    sess = await database.create_session()
    user = await sess.execute(select(User).filter_by(
        user_id=s_user_id
    ))

    user = user.scalars().first()
    if not user:
        user = User(
            user_id=s_user_id,
            username=username,
        )
        sess.add(user)
    else:
        user.username = username

    phone_number = user.phone_number

    user.dialog_have = False
    user.dialog = ""

    await sess.commit()
    await sess.close()
    reg_caption = (f"<b>üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ "
                   f"–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.</b>\n\n"
                   "<b>‚Ä¢</b> –û—Å–≤–æ–∏—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏.\n"
                   "<b>‚Ä¢</b> –£–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏.\n"
                   "<b>‚Ä¢</b> –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö.\n\n"
                   f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∞—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")
    main_caption = (f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, {username}</b>\n\n"
                    f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞,\n"
                    f"–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
    await bot.send_photo(chat_id=s_user_id, photo=FSInputFile("./static/hello_image.PNG"),
                         caption=main_caption if phone_number else reg_caption,
                         reply_markup=start_dialog_kb() if phone_number else start_registration_kb())
    if phone_number:
        await state.set_state(Form.msg)
    else:
        await state.set_state(Form.register)


@broker_router.message(Form.register)
async def register(message: Message, state: FSMContext):
    phone = str(message.contact.phone_number)
    sess = await database.create_session()
    user = await sess.execute(select(User).filter_by(
        user_id=str(message.from_user.id))
    )
    user = user.scalars().first()
    user.phone_number = phone
    await sess.commit()
    await sess.close()
    await answer(message, state)


@broker_router.message(Form.msg)
@broker_router.message(F.text == '–ù–∞—á–∞—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫')
async def start_a_dialog(message: Message, state: FSMContext):
    try:
        s_user_id = str(message.from_user.id)
        await state.clear()
    except Exception as err:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º")
        return

    sess = await database.create_session()
    user = await sess.execute(select(User).filter_by(user_id=s_user_id))
    user = user.scalars().first()

    if not user.phone_number:
        await message.answer("–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –Ω–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n")

    # –•–µ–ø–ø–∏ –ï–Ω–¥ –Ω—É–∂–µ–Ω –¥–ª—è —É—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ü–æ–≤–æ–∫ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–¥–∫–∏—Ö)
    async def end_a_dialog(dialog: str):
        user.dialog_have = False

        if dialog.count(';;'):
            dialog: str = get_structured_dialog(old_dialog=dialog, request_type='analysis')

            # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é –∏–Ω—Ñ—É —Å user.dialog
            dialog_analysis = get_the_dialog_analysis(dialog=dialog)

            await message.answer(f"‚ú® <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–≤–æ–Ω–æ–∫!</b>\n\n"
                                 f"{dialog_analysis}\n\n"
                                 "<b>–ü—Ä–æ–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫?</b>",
                                 reply_markup=start_dialog_kb())

        else:
            await message.answer("<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–≤–æ–Ω–æ–∫!</b>", reply_markup=start_dialog_kb())

    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫':
        await end_a_dialog(dialog=user.dialog + '\n\n' + '–ë—Ä–æ–∫–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∑–≤–æ–Ω–æ–∫.')
        user.dialog = ""
        await sess.commit()

    elif message.text == '–ù–∞—á–∞—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫':
        if user.dialog:
            user.dialog = ""

        user.client_personality = str(choice(person))
        user.client_trait = str(choice(traits))
        user.dialog_have = True

        await sess.commit()
        await message.answer('–ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞–ª—Å—è.', reply_markup=end_dialog_kb())

    else:
        if not user.dialog_have:
            await message.answer('<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>')

        else:
            user.dialog += f';;{message.text}' if user.dialog else message.text

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            live_dialog = get_structured_dialog(old_dialog=user.dialog)

            ai_answer: str = get_ai_answer(message=message.text, live_dialog=live_dialog, user=user)

            if ai_answer:
                user.dialog += f';;{ai_answer}'

                if '*–£–°–ü–ï–•' in ai_answer:
                    ai_answer = ai_answer.replace('*–£–°–ü–ï–•', '')

                    for i in '*_-`':
                        if i in ai_answer:
                            ai_answer = ai_answer.replace(i, '')

                    if not ai_answer or len(ai_answer) < 3:
                        good_end = [
                            '–û—Ç–ª–∏—á–Ω–æ, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!', '–•–æ—Ä–æ—à–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!', '–î–æ –≤—Å—Ç—Ä–µ—á–∏! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è.',
                            '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, –¥–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!', '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!', '–°–ø–∞—Å–∏–±–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è.'
                        ]
                        ai_answer = choice(good_end)

                    await message.answer(ai_answer)

                    happy_end = '<b>ü§© –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è, –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b>'

                    await message.answer(happy_end)
                    await end_a_dialog(dialog=user.dialog + happy_end)
                    user.dialog = ""

                else:
                    bye_reason = ''

                    if '*GOODBYE' in ai_answer:
                        bye_reason = '*GOODBYE'

                    if '*BLACKLIST' in ai_answer:
                        bye_reason = '*BLACKLIST'

                    ai_answer = ai_answer.replace(bye_reason, '').replace('*', '')

                    if ai_answer:
                        await message.answer(ai_answer)

                    if bye_reason == '*GOODBYE':
                        await end_a_dialog(dialog=user.dialog)
                        user.dialog = ""

                    if bye_reason == '*BLACKLIST':
                        happy_end = '<b>üö´ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—Å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.</b>'
                        await message.answer(happy_end)
                        await end_a_dialog(dialog=user.dialog + '\n\nüö´ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –±—Ä–æ–∫–µ—Ä–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
                        user.dialog = ""

                    # ban_phrases = ['—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', '–ø—Ä–µ–∫—Ä–∞—â–∞—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä', '–ø—Ä–µ–∫—Ä–∞—â—É –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä',
                    #                '–Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –º–æ–µ –≤—Ä–µ–º—è', '—Å–º—ã—Å–ª–∞ –≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏', '—è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ',
                    #                '–¥—Ä—É–≥–æ–º—É –±—Ä–æ–∫–µ—Ä—É', '–¥—Ä—É–≥–æ–≥–æ –±—Ä–æ–∫–µ—Ä–∞', '–ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≤–∞–º–∏',
                    #                '—è –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å', '—É–¥–∞–ª–∏–ª –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.']
                    #
                    # bye_phrases = ['–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è', '–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ', '–¥–æ —Å–≤—è–∑–∏',
                    #                '–¥–æ –≤—Å—Ç—Ä–µ—á–∏', '–¥–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á']

                    # for check in ban_phrases:
                    #     if check in ai_answer.lower():
                    #         happy_end = '<b>üö´ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—Å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.</b>'
                    #
                    #         await message.answer(happy_end)
                    #         await end_a_dialog(dialog=user.dialog + '\n\nüö´ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –±—Ä–æ–∫–µ—Ä–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
                    #         user.dialog = ""
                    #
                    # for check in bye_phrases:
                    #     if check in ai_answer.lower():
                    #         await end_a_dialog(dialog=user.dialog)
                    #         user.dialog = ""

                await sess.commit()
            else:
                msg = '<b>üò∞ –£ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –£–ø—Å...</b>'

                await message.answer(msg)
                await end_a_dialog(dialog=user.dialog + '\n\n' + msg)
                user.dialog = ""
                await sess.commit()

    await sess.close()
    await state.set_state(Form.msg)
